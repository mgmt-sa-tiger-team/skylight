---
- name: check if we need to do installer things
  uri:
    url: https://localhost/api/v2/ping/
    method: GET
    user: admin
    password: "{{ towerpass }}"
    validate_certs: False
  register: checkout
  ignore_errors: True

- name: set condtional if the above didn't error
  set_fact:
    towerchk: "{{ checkout.json.version }}"
  when: checkout.json is defined

# this is needed for now since rabbitmq-server version is not compatible with erlang as part of the in Tower 3.5.x installer
# this is not needed with tower >= 3.6.x
- block:
    - name: add rabbitmq-server repo for RHEL 8 on ec2 (1/2)
      yum_repository:
        name: erlang
        description: erlang repo
        file: rabbitmq_server
        baseurl: https://packagecloud.io/rabbitmq/erlang/el/8/$basearch
        gpgcheck: no
        repo_gpgcheck: yes
        gpgkey: https://packagecloud.io/rabbitmq/erlang/gpgkey

    - name: add rabbitmq-server repo for RHEL 8 on ec2 (2/2)
      yum_repository:
        name: rabbitmq_server
        description: rabbitmq server repo
        file: rabbitmq_server
        baseurl: https://dl.bintray.com/rabbitmq/rpm/rabbitmq-server/v3.8.x/el/8/
        enabled: yes

    - name: import rabbitmq-server repo gpg key
      rpm_key:
        state: present
        key: https://packagecloud.io/rabbitmq/erlang/gpgkey

    - name: ensure erlang is installed
      yum:
        name: erlang
        state: present
        update_cache: yes
  when:
    - towerchk not in towerversion
    - ansible_distribution_major_version|int == 8
    - towerversion is version('3.6.0', '<')

- name: download tower installer
  get_url:
    url: https://releases.ansible.com/ansible-tower/setup-bundle/ansible-tower-setup-bundle-{{ towerversion }}.tar.gz
    dest: /tmp/ansible-tower-setup-bundle-{{ towerversion }}.tar.gz
    mode: 0640
  when: towerchk not in towerversion

- name: extract installer
  unarchive:
    src: /tmp/ansible-tower-setup-bundle-{{ towerversion }}.tar.gz
    dest: /tmp/
    remote_src: True
  when: towerchk not in towerversion

- name: template inventory file
  template:
    src: inventory
    dest: /tmp/ansible-tower-setup-bundle-{{ towerversion }}/inventory
  when: towerchk != towerversion

- name: run the tower installer
  shell: ./setup.sh chdir=/tmp/ansible-tower-setup-bundle-{{ towerversion }}
  when: towerchk not in towerversion

- name: wait for tower to be up
  uri:
    url: https://localhost/api/v2/ping/
    method: GET
    user: admin
    password: "{{ towerpass }}"
    validate_certs: False
    force_basic_auth: yes
  register: check2
  until: check2.json is defined and check2.json.version in towerversion
  retries: 10
  delay: 30
  when: towerchk not in towerversion

- name: Post license key
  uri:
    url: https://localhost/api/v2/config/
    method: POST
    user: admin
    password: "{{ towerpass }}"
    body: "{{ tower_license }}"
    body_format: json
    validate_certs: False
    force_basic_auth: yes
  ignore_errors: True

- name: Add LDAP Config
  uri:
    url: https://localhost/api/v2/settings/ldap/
    method: PATCH
    user: admin
    password: "{{ towerpass }}"
    body: "{{ lookup('template','ldap_conf.json.j2') }}"
    body_format: json
    validate_certs: False
    force_basic_auth: yes

- set_fact:
    userid: "{{ inventory_hostname | regex_replace('[^0-9]', '') }}"

- name: Delete demo inventory
  uri:
    url:  https://localhost/api/v2/inventories/1/
    method: DELETE
    user: admin
    password: "{{ towerpass }}"
    validate_certs: False
    force_basic_auth: yes
    status_code:
      - 200
      - 201
      - 202
      - 204
      - 400
      - 404
  register: response
  changed_when: response.status == 204

- name: Delete demo project
  uri:
    url:  https://localhost/api/v2/projects/4/
    method: DELETE
    user: admin
    password: "{{ towerpass }}"
    validate_certs: False
    force_basic_auth: yes
    status_code:
      - 200
      - 201
      - 202
      - 204
      - 400
      - 404
  register: response
  changed_when: response.status == 204

- name: Delete demo template
  uri:
    url:  https://localhost/api/v2/job_templates/5/
    method: DELETE
    user: admin
    password: "{{ towerpass }}"
    validate_certs: False
    force_basic_auth: yes
    status_code:
      - 200
      - 201
      - 202
      - 204
      - 400
      - 404
  register: response
  changed_when: response.status == 204

- name: Delete demo credential
  uri:
    url:  https://localhost/api/v2/credentials/1/
    method: DELETE
    user: admin
    password: "{{ towerpass }}"
    validate_certs: False
    force_basic_auth: yes
    status_code:
      - 200
      - 201
      - 202
      - 204
      - 400
      - 404
  register: response
  changed_when: response.status == 204

- name: create inventory
  uri:
    url:  https://localhost/api/v2/inventories/
    method: POST
    user: admin
    password: "{{ towerpass }}"
    body: "{{ lookup('file','tower_inventory.json') }}"
    body_format: json
    validate_certs: False
    force_basic_auth: yes
    status_code:
      - 200
      - 201
      - 400
  register: response
  changed_when: response.status == 201

- name: create group
  uri:
    url:  https://localhost/api/v2/groups/
    method: POST
    user: admin
    password: "{{ towerpass }}"
    body: "{{ lookup('template','tower_group.json.j2') }}"
    body_format: json
    validate_certs: False
    force_basic_auth: yes
    status_code:
      - 200
      - 201
      - 400
  register: response
  changed_when: response.status == 201

- name: create host
  uri:
    url:  https://localhost/api/v2/hosts/
    method: POST
    user: admin
    password: "{{ towerpass }}"
    body: "{{ lookup('template','tower_host.json.j2') }}"
    body_format: json
    validate_certs: False
    force_basic_auth: yes
    status_code:
      - 200
      - 201
      - 400
  register: response
  changed_when: response.status == 201

- name: Associate host to group
  uri:
    url:  https://localhost/api/v2/groups/1/hosts/
    method: POST
    user: admin
    password: "{{ towerpass }}"
    body: '{ "id": 2 }'
    body_format: json
    validate_certs: False
    force_basic_auth: yes
    status_code:
      - 200
      - 204
      - 400
  register: response
  changed_when: response.status == 204

- name: Add win_shell/win_feature/win_reboot to allowed adhoc modules
  uri:
    url:  https://localhost/api/v2/settings/all/
    method: PATCH
    user: admin
    password: "{{ towerpass }}"
    body: "{{ lookup('template','tower_config_adhoc.json.j2') }}"
    body_format: json
    validate_certs: False
    force_basic_auth: yes
    status_code:
      - 200
      - 204
      - 400
  register: response
  changed_when: response.status == 200

- name: Set Base URL of Tower to resolve issues with websocket
  uri:
    url:  https://localhost/api/v2/settings/system/
    method: PATCH
    user: admin
    password: "{{ towerpass }}"
    body: '{ "TOWER_URL_BASE": "https://s{{ userid }}-tower.{{ dns_domain_name }}" }'
    body_format: json
    validate_certs: False
    force_basic_auth: yes
    status_code:
      - 200
      - 204
      - 400
  register: response
  changed_when: response.status == 200

- name: Disable GIT Cert validation
  lineinfile:
    path: /etc/tower/settings.py
    regexp: 'GIT_SSL_NO_VERIFY'
    line: "AWX_TASK_ENV['GIT_SSL_NO_VERIFY'] = 'True'"
  notify: restart tower