---
- name: Get the VPC ID for {{ name_prefix }}
  ec2_vpc_net_info:
    filters:
      "tag:Name": "{{ name_prefix }}-vpc"
    region: "{{ ec2_region }}"
  register: vpc_net_facts

- name: use set fact for easier variables
  set_fact:
    ec2_vpc_id: "{{ vpc_net_facts.vpcs[0].id }}"
  when: vpc_net_facts.vpcs|length > 0

- name: grab route information for {{ ec2_name_prefix }} on {{ ec2_region }}
  ec2_vpc_route_table_info:
    region: "{{ ec2_region }}"
    filters:
      vpc_id: "{{ ec2_vpc_id }}"
  register: route_table_facts
  when: vpc_net_facts.vpcs|length > 0

- name: grab information about AWS user
  aws_caller_info:
    region: "{{ ec2_region }}"
  register: whoami

- name: save username of AWS user
  set_fact:
    skylight_user: '{{ whoami.arn.split("/")[-1] }}'

# ----------------------- Destroy Tower Instances -----------------------
- name: Get ec2 Tower instance information
  ec2_instance_info:
    region: "{{ ec2_region }}"
    filters:
      vpc-id: "{{ ec2_vpc_id }}"
      "tag:Name": "{{ name_prefix + '-s' + item + '-tower'}}"
  with_sequence: count={{ user_count }}
  register: ec2_tower_instances

- name: Terminate Tower Instances
  ec2:
    region: "{{ ec2_region }}"
    state: "absent"
    instance_ids: "{{ item.instances | map(attribute='instance_id') | list }}"
  with_items:
    - "{{ ec2_tower_instances.results }}"
  when: item.instances.0 is defined and item.instances.0.instance_id is defined

# ----------------------- Destroy Gitlab Instances -----------------------
- name: Get ec2 Gitlab instance information
  ec2_instance_info:
    region: "{{ ec2_region }}"
    filters:
      vpc-id: "{{ ec2_vpc_id }}"
      "tag:Name": "{{ name_prefix }}-gitlab"
  register: ec2_gitlab_instances

#- name: "Delete GitLab DNS entry for gitlab.{{ name_prefix }}.{{ public_dns_zone }}"
#  route53:
#    state: absent
#    zone: "{{ public_dns_zone }}"
#    record: "{{ item.tags.long_name }}"
#    type: A
#    value: "{{ item.public_ip }}"
#    wait: yes
#  with_items: "{{ ec2_gitlab_instances }}"
#  when: public_dns_zone is defined and item.instances.0 is defined
#  ignore_errors: yes

- name: Terminate Gitlab Instances
  ec2:
    region: "{{ ec2_region }}"
    state: "absent"
    instance_ids: "{{ item.instances | map(attribute='instance_id') | list }}"
  with_items:
    - "{{ ec2_gitlab_instances }}"
  when: item.instances.0 is defined

# ----------------------- Destroy Docs Instances -----------------------
- name: Get ec2 Docs instance information
  ec2_instance_info:
    region: "{{ ec2_region }}"
    filters:
      vpc-id: "{{ ec2_vpc_id }}"
      "tag:Name": "{{ name_prefix }}-docs"
  register: ec2_docs_instances

#- name: "Delete Docs DNS entry for docs.{{ name_prefix }}.{{ public_dns_zone }}"
#  route53:
#    state: absent
#    zone: "{{ public_dns_zone }}"
#    record: "{{ name_prefix }}.{{ public_dns_zone }}"
#    type: A
#    value: "{{ item.public_ip }}"
#    wait: yes
#  with_items:
#    - "{{ ec2_docs_instances }}"
#  when: public_dns_zone is defined and item.instances.0 is defined
#  ignore_errors: yes

#- name: "Delete Docs DNS entry for docs.{{ item.tags.long_name }}"
#  route53:
#    state: absent
#    zone: "{{ public_dns_zone }}"
#    record: "{{ item.tags.long_name }}"
#    type: A
#    value: "{{ item.public_ip }}"
#    wait: yes
#  with_items:
#    - "{{ ec2_docs_instances }}"
#  when: public_dns_zone is defined and item.instances.0 is defined
#  ignore_errors: yes

- name: Terminate Docs Instances
  ec2:
    region: "{{ ec2_region }}"
    state: "absent"
    instance_ids: "{{ item.instances | map(attribute='instance_id') | list }}"
  with_items:
    - "{{ ec2_docs_instances }}"
  when: item.instances.0 is defined

# ----------------------- Destroy DC Instances -----------------------
- name: Get ec2 DC instance information
  ec2_instance_info:
    region: "{{ ec2_region }}"
    filters:
      vpc-id: "{{ ec2_vpc_id }}"
      "tag:Name": "{{ name_prefix }}-windc"
  register: ec2_dc_instances

- name: Terminate DC Instances
  ec2:
    region: "{{ ec2_region }}"
    state: "absent"
    instance_ids: "{{ item.instances | map(attribute='instance_id') | list }}"
  with_items:
    - "{{ ec2_dc_instances }}"
  when: item.instances.0 is defined

# ----------------------- Destroy Windows Instances -----------------------
- name: Get ec2 Windows instance information
  ec2_instance_info:
    region: "{{ ec2_region }}"
    filters:
      vpc-id: "{{ ec2_vpc_id }}"
      "tag:Name": "{{ name_prefix + '-s' + item + '-win1'}}"
  with_sequence: count={{user_count}}
  register: ec2_windows_instances

- name: Terminate Windows Instances
  ec2:
    region: "{{ ec2_region }}"
    state: "absent"
    instance_ids: "{{ item.instances | map(attribute='instance_id') | list }}"
  with_items:
    - "{{ ec2_windows_instances.results }}"
  when: item.instances.0 is defined and item.instances.0.instance_id is defined

# ----------------------- Destroy Workstation Instances -----------------------
- name: Get ec2 Workstation instance information
  ec2_instance_info:
    region: "{{ ec2_region }}"
    filters:
      vpc-id: "{{ ec2_vpc_id }}"
      "tag:Name": "{{ name_prefix + '-s' + item + '-work'}}"
  with_sequence: count="{{ user_count }}"
  register: ec2_workstation_instances

- name: Terminate Workstation Instances
  ec2:
    region: "{{ ec2_region }}"
    state: "absent"
    instance_ids: "{{ item.instances | map(attribute='instance_id') | list }}"
  with_items:
    - "{{ ec2_workstation_instances.results }}"
  when: item.instances.0 is defined and item.instances.0.instance_id is defined

#- name: "Workstation | Delete DNS entries for student workstations"
#  route53:
#    state: absent
#    zone: "{{ public_dns_zone }}"
#    record: "{{ item.tags.long_name }}"
#    type: A
#    ttl: 600
#    value: "{{ item.public_ip }}"
#    wait: yes
#  with_items: "{{ ec2_workstation_instances.results }}"
#  when: public_dns_zone is defined and item.instances.0 is defined and item.instances.0.instance_id is defined
#  ignore_errors: yes

- name: Get route53 dns information
  route53:
    state: get
    zone: "{{ public_dns_zone }}"
    record: "{{ name_prefix }}.{{ public_dns_zone }}"
    type: A
  register: route53_dns_record
  when: public_dns_zone is defined

- name: Delete route53 dns alias
  route53:
    state: absent
    zone: "{{ public_dns_zone }}"
    record: "{{ route53_dns_record.set.record }}"
    ttl: "{{ route53_dns_record.set.ttl }}"
    type: "{{ route53_dns_record.set.type }}"
    value: "{{ route53_dns_record.set.value }}"
  when: public_dns_zone is defined and route53_dns_record.set is defined
  ignore_errors: yes

################### Remove Security Groups ###################

- name: Remove Tower security group
  ec2_group:
    name: "{{ name_prefix }}-towersg"
    region: "{{ ec2_region }}"
    vpc_id: "{{ ec2_vpc_id }}"
    state: absent
  register: result
  until: result is success
  retries: 20
  delay: 10

- name: Remove Gitlab security group
  ec2_group:
    name: "{{ name_prefix }}-gitlabsg"
    region: "{{ ec2_region }}"
    vpc_id: "{{ ec2_vpc_id }}"
    state: absent
  register: result
  until: result is success
  retries: 20
  delay: 10

- name: Remove Docs security group
  ec2_group:
    name: "{{ name_prefix }}-docssg"
    region: "{{ ec2_region }}"
    vpc_id: "{{ ec2_vpc_id }}"
    state: absent
  register: result
  until: result is success
  retries: 20
  delay: 10

- name: Remove DC security group
  ec2_group:
    name: "{{ name_prefix }}-windcsg"
    region: "{{ ec2_region }}"
    vpc_id: "{{ ec2_vpc_id }}"
    state: absent
  register: result
  until: result is success
  retries: 20
  delay: 10

- name: Remove Web security group
  ec2_group:
    name: "{{ name_prefix }}-websg"
    region: "{{ ec2_region }}"
    vpc_id: "{{ ec2_vpc_id }}"
    state: absent
  register: result
  until: result is success
  retries: 20
  delay: 10

- name: Remove Windows security group
  ec2_group:
    name: "{{ name_prefix }}-windowssg"
    region: "{{ ec2_region }}"
    vpc_id: "{{ ec2_vpc_id }}"
    state: absent
  register: result
  until: result is success
  retries: 20
  delay: 10

- name: Remove ssh key pair for workshop {{ name_prefix }}
  ec2_key:
    name: "{{ skylight_user }}-{{ name_prefix }}-key"
    region: "{{ ec2_region }}"
    state: absent
  register: result
  until: result is success
  retries: 20
  delay: 10

- name: Remove subnet for {{ name_prefix }}-vpc
  ec2_vpc_subnet:
    region: "{{ ec2_region }}"
    vpc_id: "{{ ec2_vpc_id }}"
    cidr: "{{ ptr_zone_cidr }}"
    state: absent
  register: result
  until: result is success
  retries: 20
  delay: 10

- name: Remove Internet Gateway
  ec2_vpc_igw:
    vpc_id: "{{ ec2_vpc_id }}"
    region: "{{ ec2_region }}"
    tags:
      Name: "{{ name_prefix }}-igw"
    state: absent
  register: result
  until: result is success
  retries: 20
  delay: 10

- name: Remove subnet route table
  ec2_vpc_route_table:
    region: "{{ ec2_region }}"
    vpc_id: "{{ ec2_vpc_id }}"
    route_table_id: "{{ item.id }}"
    lookup: id
    state: absent
  with_items: "{{ route_table_facts.route_tables }}"
  register: result
  until: result is success
  retries: 5
  delay: 5
  ignore_errors: true

- name: Remove VPC {{ name_prefix }}-vpc
  ec2_vpc_net:
    name: "{{ name_prefix }}-vpc"
    cidr_block: "{{ ptr_zone_cidr }}"
    region: "{{ ec2_region }}"
    state: absent
  register: result
  until: result is success
  retries: 1
  delay: 1
